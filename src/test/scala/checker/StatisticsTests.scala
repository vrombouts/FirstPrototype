package checker

import org.scalatest.FlatSpec

class StatisticsTests extends FlatSpec {

  "initially, all stats variables" should "be equal to 0" in {
    val stats = new Statistics("")
    assert(stats.getNbExecutedTests == 0)
    assert(stats.getNbFailedTests == 0)
    assert(stats.getAlgo1Equals2 == 0)
    assert(stats.getAlgo1FilterDiffThan2 == 0)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 0)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 0)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 0)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }

  "updateStats" should "increment nbExecutedTests, algo1FilterNoValue and algo1Equals2" in {
    val stats = new Statistics("")
    val init: Array[Set[Int]] = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val b = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = true)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 0)
    assert(stats.getAlgo1Equals2 == 1)
    assert(stats.getAlgo1FilterDiffThan2 == 0)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 0)
    assert(stats.getAlgo1FilterNoValue == 1)
    assert(stats.getAlgo1FoundsInstantiation == 0)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 0)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }


  "updateStats" should "increment nbExecutedTests and algo1FilterMoreThan2 and nbFailedTests" in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a = Array(Set(1), Set(1, 2, 3), Set(1, 2))
    val b = Array(Set(1), Set(1, 2), Set(1, 2))
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = false)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 1)
    assert(stats.getAlgo1Equals2 == 0)
    assert(stats.getAlgo1FilterDiffThan2 == 0)
    assert(stats.getAlgo1FilterMoreThan2 == 1)
    assert(stats.getAlgo2FilterMoreThan1 == 0)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 0)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 0)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }


  "updateStats" should "increment nbExecutedTests and algo2FilterMoreThan1 and nbFailedTests" in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a = Array(Set(1), Set(1, 2), Set(1, 2))
    val b = Array(Set(1), Set(1, 2, 3), Set(1, 2))
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = false)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 1)
    assert(stats.getAlgo1Equals2 == 0)
    assert(stats.getAlgo1FilterDiffThan2 == 0)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 1)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 0)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 0)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }


  "updateStats" should "increment nbExecutedTests, algo1FilterDiffThan2 and nbFailedTests" in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a = Array(Set(1), Set(1, 2), Set(1, 2))
    val b = Array(Set(1), Set(1, 2, 3), Set(2))
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = false)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 1)
    assert(stats.getAlgo1Equals2 == 0)
    assert(stats.getAlgo1FilterDiffThan2 == 1)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 0)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 0)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 0)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }

  "updateStats" should "increment nbExecutedTests, Algo2FilterMoreThan1  and nbFailedTests " in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a: Array[Set[Int]] = Array(Set(1), Set(1, 2), Set())
    val b = Array(Set(1), Set(1, 2, 3), Set(1, 2))
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = false)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 1)
    assert(stats.getAlgo1Equals2 == 0)
    assert(stats.getAlgo1FilterDiffThan2 == 0)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 1)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 0)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 0)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }

  "updateStats" should "increment nbExecutedTests, algo2FoundsNoSol and nbFailedTests " in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a = Array(Set(1), Set(1, 2), Set(1, 2))
    val b: Array[Set[Int]] = Array(Set(1), Set(1, 2, 3), Set())
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = false)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 1)
    assert(stats.getAlgo1Equals2 == 0)
    assert(stats.getAlgo1FilterDiffThan2 == 1)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 0)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 0)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 1)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }

  "updateStats" should "increment nbExecutedTests, algo1FoundsNoSol, algo2FoundsNoSol and Algo2FilterMoreThan1 " in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a: Array[Set[Int]] = Array(Set(1), Set(1, 2), Set())
    val b: Array[Set[Int]] = Array(Set(1), Set(), Set(1, 2))
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = true)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 0)
    assert(stats.getAlgo1Equals2 == 0)
    assert(stats.getAlgo1FilterDiffThan2 == 1)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 0)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 0)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 1)
    assert(stats.getAlgo2FoundsNoSol == 1)
  }

  "updateStats" should "increment nbExecutedTests, algo1FoundsNoSol, algo2FoundsNoSol and Algo2FilterMoreThan1 because of empty doms" in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a: Array[Set[Int]] = Array(Set(), Set(), Set())
    val b: Array[Set[Int]] = Array(Set(), Set(), Set())
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = true)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 0)
    assert(stats.getAlgo1Equals2 == 1)
    assert(stats.getAlgo1FilterDiffThan2 == 0)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 0)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 0)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 1)
    assert(stats.getAlgo2FoundsNoSol == 1)
  }

  "updateStats" should "increment nbExecutedTests, Algo1FilterMoreThan2, algo1FoundsInstantiation and nbFailedTests " in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a = Array(Set(1), Set(1, 2), Set(1, 2))
    val b = Array(Set(1), Set(1), Set(1))
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = false)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 1)
    assert(stats.getAlgo1Equals2 == 0)
    assert(stats.getAlgo1FilterDiffThan2 == 0)
    assert(stats.getAlgo1FilterMoreThan2 == 1)
    assert(stats.getAlgo2FilterMoreThan1 == 0)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 1)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 0)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }

  "updateStats" should "increment nbExecutedTests, Algo2FilterMoreThan1 and nbFailedTests " in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a = Array(Set(1), Set(2), Set(2))
    val b = Array(Set(1), Set(1, 2, 3), Set(1, 2))
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = false)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 1)
    assert(stats.getAlgo1Equals2 == 0)
    assert(stats.getAlgo1FilterDiffThan2 == 0)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 1)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 0)
    assert(stats.getAlgo2FoundsInstantiation == 0)
    assert(stats.getAlgo1FoundsNoSol == 0)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }

  "updateStats" should "increment nbExecutedTests, Algo2FilterMoreThan1, algo1FoundsInstantiation and algo2FoundsInstantiation" in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a = Array(Set(1), Set(1), Set(1))
    val b = Array(Set(1), Set(1), Set(1))
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = true)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 0)
    assert(stats.getAlgo1Equals2 == 1)
    assert(stats.getAlgo1FilterDiffThan2 == 0)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 0)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 1)
    assert(stats.getAlgo2FoundsInstantiation == 1)
    assert(stats.getAlgo1FoundsNoSol == 0)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }

  "updateStats" should "increment nbExecutedTests, Algo2FilterMoreThan1, algo1FoundsInstantiation, algo2FoundsInstantiation and nbFailedTests " in {
    val stats = new Statistics("")
    val init = Array(Set(1, 2, 3), Set(1, 2, 3), Set(1, 2, 3))
    val a = Array(Set(1), Set(1), Set(2))
    val b = Array(Set(1), Set(1), Set(1))
    val returnValues: Array[Array[Set[Int]]] = Array(init, a, b)
    stats.updateStats(returnValues, null, result = false)
    assert(stats.getNbExecutedTests == 1)
    assert(stats.getNbFailedTests == 1)
    assert(stats.getAlgo1Equals2 == 0)
    assert(stats.getAlgo1FilterDiffThan2 == 1)
    assert(stats.getAlgo1FilterMoreThan2 == 0)
    assert(stats.getAlgo2FilterMoreThan1 == 0)
    assert(stats.getAlgo1FilterNoValue == 0)
    assert(stats.getAlgo1FoundsInstantiation == 1)
    assert(stats.getAlgo2FoundsInstantiation == 1)
    assert(stats.getAlgo1FoundsNoSol == 0)
    assert(stats.getAlgo2FoundsNoSol == 0)
  }


}
